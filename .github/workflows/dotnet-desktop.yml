name: WinUI3 Release - MuhasibPro (Fixed .NET Version)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.0.0)'
        required: false
        type: string
  push:
    tags:
      - "v*"

env:
  PROJECT_PATH: MuhasibPro/MuhasibPro.csproj
  SOLUTION_PATH: MuhasibPro.sln
  APP_NAME: MuhasibPro
  DOTNET_VERSION: '8.0.407'

jobs:
  release:
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8.0.407
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Check .NET Version
        run: |
          dotnet --version
          dotnet --list-sdks

      - name: Clean obj and bin folders
        run: |
          Get-ChildItem -Path . -Recurse -Directory -Name | Where-Object { $_ -match "^(bin|obj)$" } | ForEach-Object { 
            Write-Host "Cleaning $_"
            Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue 
          }

      - name: Restore packages with exact framework
        run: |
          dotnet restore "${{ env.SOLUTION_PATH }}" `
          -p:Platform=x64 `
          -p:TargetFramework=net8.0-windows10.0.26100.0 `
          --verbosity detailed

      - name: Build solution
        run: |
          msbuild "${{ env.SOLUTION_PATH }}" `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:TargetFramework=net8.0-windows10.0.26100.0 `
            /p:WindowsPackageType=None `
            /verbosity:minimal `
            /nologo

      - name: Publish with EXACT VS2022 Settings
        run: |
          Write-Host "Publishing with EXACT VS2022 settings..."          
          $publishPath = "publish-win-x64"
          $absolutePublishPath = Join-Path $env:GITHUB_WORKSPACE $publishPath
      
          if (Test-Path $publishPath) {
            Remove-Item $publishPath -Recurse -Force
          }
          New-Item -ItemType Directory -Path $publishPath -Force | Out-Null
      
          # VS2022 PUBLISH PROFİLİNİN TAM AYNISI
          msbuild "${{ env.PROJECT_PATH }}" `
            /t:Publish `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:RuntimeIdentifier=win-x64 `
            /p:SelfContained=true `
            /p:PublishDir="$absolutePublishPath" `
            /p:WindowsAppSdkSelfContained=true `
            /p:WindowsPackageType=None `
            /p:GenerateLibraryLayout=true `
            /p:PublishReadyToRun=false `
            /p:PublishSingleFile=false `
            /p:PublishTrimmed=false `
            /p:TargetFramework=net8.0-windows10.0.26100.0 `
            /p:UseCurrentRuntimeIdentifier=true `
            /p:CopyOutputSymbolsToPublishDirectory=false `
            /verbosity:minimal `
            /nologo
      
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Publish failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          # Validation
          $mainExe = Join-Path $publishPath "${{ env.APP_NAME }}.exe"
          if (Test-Path $mainExe) {
            $exeSize = (Get-Item $mainExe).Length / 1MB
            $fileCount = (Get-ChildItem $publishPath -File).Count
            Write-Host "Published: $([math]::Round($exeSize, 2)) MB EXE, $fileCount files"
            
            # PRI kontrolü
            $oldPriFile = Join-Path $publishPath "resources.pri"
            $newPriFile = Join-Path $publishPath "${{ env.APP_NAME }}.pri"
            
            if (Test-Path $newPriFile) {
              Write-Host "✓ ${{ env.APP_NAME }}.pri found"
              Copy-Item $newPriFile $oldPriFile -Force
            } elseif (Test-Path $oldPriFile) {
              Write-Host "✓ resources.pri found"
            } else {
              Write-Host "⚠ WARNING: No PRI file found"
            }
          }

     

      - name: Verify Published Files
        run: |
          $publishPath = "publish-win-x64"
          Write-Host "Published file structure:"
          Get-ChildItem $publishPath -Recurse | Select-Object Name, Length | Format-Table -AutoSize
          
          # Kritik dosya boyutlarını kontrol et
          $exePath = Join-Path $publishPath "${{ env.APP_NAME }}.exe"
          if (Test-Path $exePath) {
            $exeSize = (Get-Item $exePath).Length / 1MB
            Write-Host "Main EXE size: $([math]::Round($exeSize, 2)) MB"
          }

      # Aşağıdaki adımlar aynı kalacak...
      - name: Fix PRI file naming
        run: |
          $publishPath = "publish-win-x64"
          $oldPriFile = Join-Path $publishPath "resources.pri"
          $newPriFile = Join-Path $publishPath "${{ env.APP_NAME }}.pri"
          
          Write-Host "Checking PRI files..."
          
          if ((Test-Path $newPriFile) -and (-not (Test-Path $oldPriFile))) {
            Write-Host "Creating resources.pri from ${{ env.APP_NAME }}.pri for compatibility"
            Copy-Item $newPriFile $oldPriFile -Force
          }
          
          if ((Test-Path $oldPriFile) -and (-not (Test-Path $newPriFile))) {
            Write-Host "Creating ${{ env.APP_NAME }}.pri from resources.pri for new SDK compatibility"
            Copy-Item $oldPriFile $newPriFile -Force
          }

      - name: Get latest Velopack CLI version
        id: get_vpk_version
        run: |
            $response = Invoke-RestMethod -Uri "https://api.nuget.org/v3-flatcontainer/vpk/index.json"
            $latestVersion = $response.versions[-1]
            echo "vpk_version=$latestVersion" >> $env:GITHUB_OUTPUT

      - name: Install Velopack CLI
        run: |
            dotnet tool install -g vpk --version ${{ steps.get_vpk_version.outputs.vpk_version }}

      - name: Generate release notes
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $buildDate = Get-Date -Format "dd.MM.yyyy HH:mm"
          $notes = @"
          # MuhasibPro v$version
          ## Sürüm Bilgileri
          - **Sürüm:** $version
          - **Derleme Tarihi:** $buildDate
          - **Platform:** Windows 10/11 (x64)
          - **UI Framework:** WinUI 3
          "@
          $notes | Out-File -FilePath "RELEASE_NOTES.md" -Encoding UTF8

      - name: Create Velopack package
        run: |
            $version = "${{ steps.version.outputs.version }}"
            $publishPath = "publish-win-x64"
            $outputDir = "releases"
            New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
    
            vpk pack `
              --packId "${{ env.APP_NAME }}" `
              --packVersion "$version" `
              --packDir "$publishPath" `
              --outputDir "$outputDir" `
              --mainExe "${{ env.APP_NAME }}.exe" `
              --packTitle "MuhasibPro" `
              --packAuthors "MuhasibPro Team" `
              --releaseNotes "./RELEASE_NOTES.md"

      - name: Create portable ZIP
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $zipName = "${{ env.APP_NAME }}-v$version-portable-win-x64.zip"
          $zipPath = Join-Path "releases" $zipName
          Compress-Archive -Path "publish-win-x64/*" -DestinationPath $zipPath -Force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: "MuhasibPro v${{ steps.version.outputs.version }}"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            releases/*.vpk
            releases/*.zip

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: muhasibpro-v${{ steps.version.outputs.version }}-release
          path: |
            releases/*
            RELEASE_NOTES.md
          retention-days: 30
